\documentclass[a4paper,14pt]{extreport}

\usepackage[T2A]{fontenc}
\usepackage[utf8]{inputenc}

\usepackage[english,russian]{babel}

\usepackage{amsthm}

\usepackage{hyperref}

\usepackage{graphicx}	
\usepackage{bmpsize}
\usepackage{epstopdf}
\usepackage{titlesec}
\usepackage{listings}
\usepackage{indentfirst}

\usepackage{geometry}
\geometry{left=3cm}
\geometry{right=1.8cm}
\geometry{top=1.5cm}
\geometry{bottom=2cm}
\renewcommand{\baselinestretch}{1.5}
        
%\hyphenpenalty=10000

\begin{document}
\thispagestyle{empty}
\pagestyle{empty}

{\Large Пояснительная записка}

Статическая проверка неизменяемости объектов на этапе компиляции позволяет еще до запуска программы находить ошибки, связанные с неправомерным изменением объектов, которые обычно трудно выявлять и исследовать в процессе работы программы (особенно это касается ошибок, связанных с многопоточным программированием). 

В данной работе предложена система аннотаций для языка Java, позволяющая выражать как ссылочную неизменяемость (через неизменяемую ссылку объект не может быть изменен), так и объектную неизменяемость (состояние неизменяемого объекта не может быть изменено после окончания фазы его создания). Многие объекты изменяются во время конструирования и не изменяются после окончания этой фазы. В данной работе представлен способ создания неизменяемых объектов, которые могут меняться во время файзы конструирования, но после ее завершения гарантируется их неизменяемость.

Частой проблемой при добавлении какой-либо новой функциональности в язык является то, что сущесвующий библиотечный код уже был разработан без использования этой функциональности. Реальные приложения обычно содержат большое количество библиотечных классов (например, в приложении YouTrack их примерно семь тысяч), что не позволяет проаннотировать их вручную. Поэтому в данной работе был также разработан алгоритм, позволяющий расставить необходимые аннотации в существующем библиотечном коде для его дальнейшего использования из проаннотированного кода.

\end{document}

