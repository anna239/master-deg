\chapter{Введение}

\section{Статический анализ кода}

С течением времени сложность программных систем возрастает. Как следствие, их тестирование занимает все больше времени. При многопоточном программировании особенно часто проявляются ошибки, сложные для обнаружения, воспроизведения и анализа. Вся логика работы программы уже не может быть легко понята и осмыслена одним программистом. В связи с дороговизной ручного тестирования и большой сложностью программынх систем активно развиваются различные виды автоматической проверки программ. Их можно условно разделить на два вида:
\begin{itemize}
\item автоматическая проверка корректности программы во время ее работы или работы ее отдельных частей
\item проверка программы на корректность без ее запуска
\end{itemize}

К первой группе можно отнести всевозможные виды тестирования. 

\begin{Def}\label{static_program_analysis}
Статический анализ кода -- это анализ программного обеспечения, производимый без реального выполнения исследуемых программ.
\end{Def}

Статический анализ позволяет еще до запуска программы выявить многие виды ошибок, большинство из которых сложно искать и воспроизводить непосредственно во время работы приложения. В связи с этим активно развиваются различные инструменты, позволяющие статически доказывать отсутсвие в программах ошибок тех или иных видов.  



\section{Неизменяемость в контексте объектно-ориентированного языка}

В различных контекстах понятие неизменяемости может пониматься по-разному. В данной работе рассмотрено несколько видов неизменяемости:

\begin{Def}\label{immutabule_class}
Неизменяемый класс -- класс, все экземпляры которого являются неизменяемыми. 
\end{Def}

\begin{Def}\label{reference_immutability}
Неизменяемая ссылка -- ссылка, которая не может быть использована для изменения объекта, на который она указывает (при этом объект может быть изменен через другую ссылку).
\end{Def} 

Если какая-либо система статического анализа позволяет выражать данное свойство объекта, будем говорить, что в данной системе есть поддержка \textit{ссылочной неизменяемости}. 

\begin{Def}\label{immutable_object}
Неизменяемый объект -- объект, о котором известно, что не существует ни одной ссылки, через которую его можно изменить.
\end{Def}

Если какая-либо система статического анализа позволяет выражать данное свойство объекта, будем говорить, что в данной системе есть поддержка \textit{объектной неизменяемости}.

\begin{Def}\label{deep_immutablity}
Глубокая (транзитивная) неизменяемость характеризует следующее свойство: если объект неизменяем, то неизменяемы также и все объекты, доступные из него по ссылкам.
\end{Def}

\input{prev_work}

\section{Постановка задачи}

Целью данной работы была разработка системы, позволяющей контролировать изменяемость объектов на этапе компиляции для языка Java. 

К данной системе были предъявлены следующие требования:

\begin{itemize}
	\item Должна быть поддержана как объектная, так и ссылочная неизменяемость.
	
	\item Необходима возможность исключать некоторые поля из абстрактного состояния объекта. 
	
	\item Данная система должна давать возможность создавать неизменяемые циклические структуры объектов.
	
	\item Необходимо иметь возможность использовать уже существующий код.
\end{itemize}

В рамках данной работы решались следующие задачи:

\begin{itemize}

	\item Разработка системы аннотаций, позволяющей выражать неизменяемость объектов.
	
	\item Разработка алгоритма вывода аннотаций для существующего кода.

\end{itemize}



