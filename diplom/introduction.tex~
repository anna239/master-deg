\chapter{Введение}

\section{Статический анализ кода}

С течением времени программные системы становятся все сложнее. Как следствие, их тестирование занимает все больше времени, при многопоточном программировании особенно часто проявляются ошибки, сложные для обнаружения, воспроизведения и анализа. Вся логика работы программы уже не может быть легко понята и осмысленна одним программистом. В связи с дороговизной ручного тестирования и большой сложностью программынх систем активно развиваются различные виды автоматической проврки программ. Их можно условно разделить на два вида:
\begin{itemize}
\item автоматическая проверка корректности программы во время ее работы или работы ее отдельных частей
\item проверка программы на корректность без ее запуска
\end{itemize}

К первой группе можно отнести всевозможные виды тестирования. 

\begin{Def}\label{static_program_analysis}
Статический анализ кода -- это анализ программного обеспечения, производимый без реального выполнения исследуемых программ.
\end{Def}

Статический анализ позволяет выявить многие виды ошибок еще до запуска программы, большинство из которых сложно искать и воспроизводить непосредственно во время работы приложения. В связи с этим активно развиваются различные инструменты, позволяющие статически доказывать отсутсвие в программах ошибок тех или иных видов.  

\section{Неизменяемость в контексте объектно-ориентированного языка}

В различных контекстах понятие неизменяемости может пониматься по-разному. В данной работе рассмотрено несколько видов неизменяемости:

\begin{Def}\label{immutabule_class}
Неизменяемый класс -- класс, все представители которого являются неизменяемыми. 
\end{Def}

Примером неизменяемого класса является, например, java.lang.String.

\begin{Def}\label{immutable_object}
Неизменяемый объект -- объект, который не может быть изменен, при не гарантируется, что другие представители того же самого класса могут быть изменены.
\end{Def}
Если в какая-либо система позволяет выражать данное свойство объекта, будем говорить, что в данной системе есть поддержка \textit{объектной неизменяемости}.

\begin{Def}\label{reference_immutability}
неизменяемая ссылка -- ссылка, которая не может быть использована для изменения объекта, на который она указывает (при этом объект может быть изменен через другую ссылку).
\end{Def} 

\textit{добавить кратинку}
Если какая-либо система позволяет выражать данное свойство объекта, будем говорить, что в данной системе есть поддержка \textit{ссылочной неизменяемости}. 

Нужно заметить, что данные понятия не являются чем-то искусственным по отношению к языкам программирования. Приведем примеры использования данных понятий в языке программирования Java.

Например, в документации к классу org.joda.time.Period написано: "Неизменяемый временной период..." \footnote{http://joda-time.sourceforge.net/apidocs/org/joda/time/Period.html}. Таким образом, класс org.joda.time.Period является неизменяемым классом. 

\input{prev_work}

\section{Постановка задачи}

Целью данной работы была разработка системы, позволяющей контролировать изменяемость объектов на этапе компиляции для языка Kotlin. 

К данной системе были предъявлены следующие требования:

\begin{itemize}
	\item Должна быть поддержана как объектная, так и ссылочная неизменяемость.
	
	\item Негобходима возможность исключать некоторые поля из абстрактного состояния объекта. 
	
	\item Данная система должна давать возможность создавать неизменяемые циклические структуры объектов.
	
	\item Необходимо иметь вохможность использовать уже существующий код.
\end{itemize}

В рамках данной работы решались следующие задачи:

\begin{itemize}

	\item Разработка системы аннотаций, позволяющей выражать неизменяемость объектов.
	
	\item Разработка алгоритма вывода аннотаций для существующего кода.

\end{itemize}



